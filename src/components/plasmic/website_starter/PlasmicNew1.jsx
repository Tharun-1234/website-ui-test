// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hBnsHuByEFD9oZzEjMYt2c
// Component: 7Mn_7u0fz-l5
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: hBnsHuByEFD9oZzEjMYt2c/projectcss
import sty from "./PlasmicNew1.module.css"; // plasmic-import: 7Mn_7u0fz-l5/css
import Arrow1Icon from "./icons/PlasmicIcon__Arrow1"; // plasmic-import: AOSkysdydvwO/icon

createPlasmicElementProxy;

export const PlasmicNew1__VariantProps = new Array();

export const PlasmicNew1__ArgProps = new Array();

const $$ = {};

function PlasmicNew1__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"iPhone131449"}
            data-plasmic-override={overrides.iPhone131449}
            className={classNames(projectcss.all, sty.iPhone131449)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__lJgg9
              )}
            >
              {"Login With Below"}
            </div>
            <div
              data-plasmic-name={"frame56"}
              data-plasmic-override={overrides.frame56}
              className={classNames(projectcss.all, sty.frame56)}
            >
              <div
                data-plasmic-name={"group126"}
                data-plasmic-override={overrides.group126}
                className={classNames(projectcss.all, sty.group126)}
              >
                <div
                  data-plasmic-name={"group1"}
                  data-plasmic-override={overrides.group1}
                  className={classNames(projectcss.all, sty.group1)}
                >
                  <div
                    data-plasmic-name={"rectangle10"}
                    data-plasmic-override={overrides.rectangle10}
                    className={classNames(projectcss.all, sty.rectangle10)}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iZyvp
                  )}
                >
                  {"Register"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"group124"}
              data-plasmic-override={overrides.group124}
              className={classNames(projectcss.all, sty.group124)}
            >
              <div
                data-plasmic-name={"rectangle13"}
                data-plasmic-override={overrides.rectangle13}
                className={classNames(projectcss.all, sty.rectangle13)}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xol98
                )}
              >
                {"Login"}
              </div>
            </div>
            <div
              data-plasmic-name={"unnamed1"}
              data-plasmic-override={overrides.unnamed1}
              className={classNames(projectcss.all, sty.unnamed1)}
            />

            <div
              data-plasmic-name={"download2"}
              data-plasmic-override={overrides.download2}
              className={classNames(projectcss.all, sty.download2)}
            />

            <Arrow1Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__i4XKv
              )}
            >
              {"Continue with"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hXhHs
              )}
            >
              {"Forgot password ?"}
            </div>
            <div
              data-plasmic-name={"rectangle139"}
              data-plasmic-override={overrides.rectangle139}
              className={classNames(projectcss.all, sty.rectangle139)}
            />

            <div
              data-plasmic-name={"component37"}
              data-plasmic-override={overrides.component37}
              className={classNames(projectcss.all, sty.component37)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__djHGg
                )}
              >
                {"Enter Your Email"}
              </div>
            </div>
            <div
              data-plasmic-name={"component38"}
              data-plasmic-override={overrides.component38}
              className={classNames(projectcss.all, sty.component38)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___07NiC
                )}
              >
                {"Enter Your Password"}
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPhone131449",
    "frame56",
    "group126",
    "group1",
    "rectangle10",
    "group124",
    "rectangle13",
    "unnamed1",
    "download2",
    "svg",
    "rectangle139",
    "component37",
    "component38"
  ],

  iPhone131449: [
    "iPhone131449",
    "frame56",
    "group126",
    "group1",
    "rectangle10",
    "group124",
    "rectangle13",
    "unnamed1",
    "download2",
    "svg",
    "rectangle139",
    "component37",
    "component38"
  ],

  frame56: ["frame56", "group126", "group1", "rectangle10"],
  group126: ["group126", "group1", "rectangle10"],
  group1: ["group1", "rectangle10"],
  rectangle10: ["rectangle10"],
  group124: ["group124", "rectangle13"],
  rectangle13: ["rectangle13"],
  unnamed1: ["unnamed1"],
  download2: ["download2"],
  svg: ["svg"],
  rectangle139: ["rectangle139"],
  component37: ["component37"],
  component38: ["component38"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNew1__ArgProps,
          internalVariantPropNames: PlasmicNew1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNew1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNew1";
  } else {
    func.displayName = `PlasmicNew1.${nodeName}`;
  }
  return func;
}

export const PlasmicNew1 = Object.assign(
  // Top-level PlasmicNew1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPhone131449: makeNodeComponent("iPhone131449"),
    frame56: makeNodeComponent("frame56"),
    group126: makeNodeComponent("group126"),
    group1: makeNodeComponent("group1"),
    rectangle10: makeNodeComponent("rectangle10"),
    group124: makeNodeComponent("group124"),
    rectangle13: makeNodeComponent("rectangle13"),
    unnamed1: makeNodeComponent("unnamed1"),
    download2: makeNodeComponent("download2"),
    svg: makeNodeComponent("svg"),
    rectangle139: makeNodeComponent("rectangle139"),
    component37: makeNodeComponent("component37"),
    component38: makeNodeComponent("component38"),
    // Metadata about props expected for PlasmicNew1
    internalVariantProps: PlasmicNew1__VariantProps,
    internalArgProps: PlasmicNew1__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNew1;
/* prettier-ignore-end */
